apply plugin: 'com.android.application'
apply plugin: 'com.chaquo.python'

def REPO_ROOT = "../.."

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "org.haobtc.onekey"
        minSdkVersion 26 // android 8.0.0
        targetSdkVersion 29
        versionCode 1
        versionName "2.0.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        def ecVersion = null
        file("$REPO_ROOT/electrum/version.py").eachLine {
            def matcher = it =~ / *ELECTRUM_VERSION *= *'([0-9.]+)'.*/
            if (matcher.matches()) {
                ecVersion = matcher.group(1)
            }
        }
        if (ecVersion == null) {
            throw new GradleException("Couldn't find version number")
        }
        File versionPropsFile = file('version.properties')

        def BUILD_NUM
        def TRAVIS_BUILD_NUMBER = System.getenv("TRAVIS_BUILD_NUMBER") ?: null
        if (TRAVIS_BUILD_NUMBER == null) {
            if (versionPropsFile.canRead()) {
                def Properties versionProps = new Properties()

                versionProps.load(new FileInputStream(versionPropsFile))

                BUILD_NUM = versionProps['VERSION_CODE'].toInteger() + 1

                versionProps['VERSION_CODE'] = BUILD_NUM.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            } else {
                throw new GradleException("Could not read version.properties!")
            } 
        }
        else {
           BUILD_NUM = TRAVIS_BUILD_NUMBER.toInteger() 
        }
        def verParsed = ecVersion.split(/\./).collect { Integer.parseInt(it) }
        versionCode = (verParsed[0] * 1000000) + (verParsed[1] * 10000) + BUILD_NUM
        println "VERSION_CODE incremented to " + versionCode

        python {
            pip {
                install "-r", "$REPO_ROOT/contrib/deterministic-build/requirements.txt"
                install "-r", "$REPO_ROOT/contrib/deterministic-build/requirements-android.txt"
            }
            pyc {
                src true
                pip true
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
        resConfigs "zh"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ eventBusIndex : 'org.haobtc.onekey.MyEventBusIndex' ]
            }
        }
    }
    buildFeatures {
        dataBinding = true
    }
    sourceSets {
        main {
            python {
                srcDir REPO_ROOT
//                include "electrum/**"                               // In ../.. (renamed below)
//                include("chaquopy/**", "electrum_gui/**",  // In src/main/python
//                        "electrum_plugins/**")
                include ("electrum/**","electrum_gui/**")
                exclude "**/*.po", "**/*.pot"
//                srcDir "src/main/trezor/python-trezor/src"
                srcDir "$REPO_ROOT/trezor/python-trezor/src"
                include "trezorlib/**"
            }
        }
    }
    flavorDimensions "version"
    productFlavors {
        MainNet {
            buildConfigField "String", "net_type", "\"MainNet\""
            applicationId "com.bixin.wallet.mainnet"
            manifestPlaceholders = [app_name: "@string/app_name", allow_backup: false,  app_icon: "@drawable/logo_app"]
        }
        TestNet {
            buildConfigField "String", "net_type", "\"TestNet\""
            applicationId "com.bixin.wallet.testnet"
            manifestPlaceholders = [app_name: "@string/testnet", allow_backup: true,  app_icon: "@drawable/onekey_testnet_icon"]
        }
        RegTest {
            buildConfigField "String", "net_type", "\"RegTest\""
            applicationId "com.bixin.wallet.regnet"
            manifestPlaceholders = [app_name: "@string/regnet", allow_backup: true, app_icon: "@drawable/onekey_testnet_icon"]
        }
    }
    lintOptions {

        abortOnError false

        disable "MissingTranslation"
    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
            keyAlias "androiddebugkey"
            keyPassword "android"
            storePassword "android"

			// Optional, specify signing versions used
			v1SigningEnabled true
            v2SigningEnabled true
        }
		release {
			storeFile file(System.getenv("RELEASE_STORE_FILE") ?: "../debug.keystore")
			keyAlias System.getenv("RELEASE_KEY_ALIAS") ?: "androiddebugkey"
			storePassword System.getenv("RELEASE_STORE_PASSWORD") ?: "android"
			keyPassword System.getenv("RELEASE_KEY_PASSWORD") ?: "android"

			// Optional, specify signing versions used
			v1SigningEnabled true
            v2SigningEnabled true
		}
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
			signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
 

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "bixin-${variant.versionCode}-${variant.productFlavors[0].name}-${variant.buildType.name}.apk"
        }
    }
}

afterEvaluate {
    def stringsTask = task("generateStrings", type: Exec) {
        def pyVersion = "3"
        if (System.getProperty("os.name").startsWith("Windows")) {
            executable "py"
            args "-$pyVersion"
        } else {
            executable "python$pyVersion"
        }
        args "generate_strings.py"
    }

    for (variant in android.applicationVariants) {
        // Rename directories to match package names, like package_dir does in setup.py.
        def task = tasks.getByName("merge${variant.name.capitalize()}PythonSources")
        def dstDir = task.destinationDir
        task.doLast {
            def src = "$dstDir/electrum"
            def dst = "$dstDir/electrum"
            if (!file(src).renameTo(dst)) {
                throw new GradleException("Failed to rename $src to $dst")
            }
        }

        // Automatically generate strings the first time the app is built. To regenerate them
        // later, either delete values/strings.xml and rebuild the app, or simply rerun the
        // `generateStrings` task manually.
        if (!file("src/main/res/values/strings.xml").exists()) {
            tasks.getByName("generate${variant.name.capitalize()}Resources")
                    .dependsOn(stringsTask)
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.1'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.1.1'
    // third part
//    implementation 'com.github.yuzhiqiang1993:zxing:2.2.8' // qrcode
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation 'com.google.android.material:material:1.2.1'
    def acraVersion = "5.2.0"
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"
    implementation "ch.acra:acra-http:$acraVersion"
    //noinspection AnnotationProcessorOnCompilePath
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    //Picasso
    implementation 'com.squareup.picasso:picasso:2.5.2'
    //immersionbar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    //baseadpter
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    //OKhttp
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.zhy:okhttputils:2.0.0'
    //autosize
    implementation 'me.jessyan:autosize:0.9.1'
    //gson
    implementation 'com.google.code.gson:gson:2.8.6'
    //Eventbus
    implementation 'org.greenrobot:eventbus:3.1.1'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.1'
    //wheel_viewpager
    implementation 'com.github.ThirdGoddess:GoddessTNT:v1.5'
    implementation project(path: ':dRlibfileselector')
    //Pull up refresh pull down load
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.4-7'
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-6'
    //bluetooth
    implementation project(':blelibrary')
    implementation project(':zxinglibrary')
    //alibaba json
    implementation 'com.alibaba:fastjson:1.1.70.android'
    // app internal update
    implementation 'com.azhon:appupdateX:2.9.0'
    // dfu
//    implementation 'no.nordicsemi.android:dfu:1.10.1'
    implementation project(':dfu')
    //SwipeDelMenuLayout
    implementation 'com.github.mcxtzhang:SwipeDelMenuLayout:V1.3.0'
    // android aop programing support
    implementation 'org.aspectj:aspectjrt:1.9.5'
    // guava
    implementation 'com.google.guava:guava:29.0-android'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.65.01'
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'com.tencent.bugly:crashreport:3.2.33' //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    implementation 'com.tencent.bugly:nativecrashreport:3.7.471' //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    implementation 'com.lxj:xpopup:2.2.7'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation "io.reactivex.rxjava3:rxjava:3.0.4"

}

repositories {
    mavenCentral()
}
// AspectJ
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }
    // Android 3.3.0+
    JavaCompile javaCompileTask = variant.javaCompileProvider.get()
    javaCompileTask.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompileTask.destinationDir.toString(),
                         "-aspectpath", javaCompileTask.classpath.asPath,
                         "-d", javaCompileTask.destinationDir.toString(),
                         "-classpath", javaCompileTask.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}
